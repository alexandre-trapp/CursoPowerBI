demo()
library(Amelia)
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
install.packages("e1071")
install.packages("e1071")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
install.packages("caret")
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
install.packages("e1071")
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
library(Amelia)
library(ggplot2)
library(caret)
library(stringi)
install.packages("caret")
library(caret)
install.packages ("package_name", repos = c (" http://rstudio.org/_packages ", " http://cran.rstudio.com ", dependÃªncias = TRUE))
install.packages("caret", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(caret)
library(caret)
uninstall.packages("caret", repos="http://cran.rstudio.com/", dependencies=TRUE)
remove.packages("caret", repos="http://cran.rstudio.com/", dependencies=TRUE)
remove.packages("caret", repos="http://cran.rstudio.com/")
remove.packages("caret")
dataset <- read.csv("credit-card.csv")
getwd()
setwd("D:\Alexandre\Estudos\CursoPowerBI\Aulas\Cap10")
getwd()
setwd("D:/Alexandre/Estudos/CursoPowerBI/Aulas/Cap10")
dataset <- read.csv("credit-card.csv")
View(dataset)
str(dataset)
cls
head(dataset)
head(dataset$AGE)
dataset$AGE <- cut(dataset$AGE, c(0,30,50,100), labels = c("Jovem","Adulto","Idoso"))
head(dataset$AGE)
dataset$SEX <- cut(dataset$SEX, c(0,1,2), labels = c("Masculino","Feminino"))
head(dataset$SEX)
dataset$EDUCATION <- cut(dataset$EDUCATION, c(0,1,2,3,4),
labels = c("Pos Graduado","Graduado","Ensino Medio","Outros"))
head(dataset$EDUCATION)
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c(-1,0,1,2,3),
labels = c("Desconhecido","Casado","Solteiro","Outros"))
head(dataset$MARRIAGE)
dataset$PAY_0 <-as.factor(dataset$PAY_0)
dataset$PAY_2 <-as.factor(dataset$PAY_2)
dataset$PAY_3 <-as.factor(dataset$PAY_3)
dataset$PAY_4 <-as.factor(dataset$PAY_4)
dataset$PAY_5 <-as.factor(dataset$PAY_5)
dataset$PAY_6 <-as.factor(dataset$PAY_6)
dataset$PAY_0 <-as.factor(dataset$PAY_0)
dataset$PAY_2 <-as.factor(dataset$PAY_2)
dataset$PAY_3 <-as.factor(dataset$PAY_3)
dataset$PAY_4 <-as.factor(dataset$PAY_4)
dataset$PAY_5 <-as.factor(dataset$PAY_5)
dataset$PAY_6 <-as.factor(dataset$PAY_6)
dataset$default.payment.next.month <- as.factor(dataset$default.payment.next.month)
head(dataset)
str(dataset)
colnames(dataset)
colnames(dataset)[25] <- "inadimplente"
colnames(dataset)
str(dataset)
sapply(dataset, function(x) sum(is.na(x)))
missmap(dataset, main = "Valores Missing Observados")
dataset <- na.omit(dataset)
missmap(dataset, main = "Valores Missing Observados")
sapply(dataset, function(x) sum(is.na(x)))
missmap(dataset, main = "Valores Missing Observados")
dataset <- na.omit(dataset)
missmap(dataset, main = "Valores Missing Observados")
dataset$ID <- NULL
table(dataset$inadimplente)
qplot(inadimplente, data = dataset, geom = "bar") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
set.seed(12345)
TrainingDataIndex <- createDataPartition(dataset$inadimplente, p = 0.45, list = FALSE)
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
TrainingDataIndex <- createDataPartition(dataset$inadimplente, p = 0.45, list = FALSE)
install.packages("caret")
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(caret)
library(caret)
install.packages('devtools')
library(caret)
install.packages("caret")
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(caret)
install.packages("pbkrtest", dependencies = TRUE)
library(caret)
install.packages("lme4", dependencies = TRUE)
library(lme4)
methods(sigma)
library(caret)
TrainingDataIndex <- createDataPartition(dataset$inadimplente, p = 0.45, list = FALSE)
library(caret)
TrainingDataIndex <- createDataPartition(dataset$inadimplente, p = 0.45, list = FALSE)
TrainingDataIndex
trainData <- dataset[TrainingDataIndex,]
table(trainData$inadimplente)
prop.table(table(trainData$inadimplente))
nrow(trainData)
DistributionCompare <- cbind(prop.table(table(trainData$inadimplente)), prop.table(table(dataset$inadimplente)))
colnames(DistributionCompare) <- c("Treinamento", "Original")
DistributionCompare
meltedDComp <- melt(DistributionCompare)
meltedDComp
ggplot(meltedDComp, aes(x = X1, y = value)) + geom_bar( aes(fill = X2), stat = "identity", position = "dodge") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
testData <- dataset[-TrainingDataIndex,]
TrainingParameters <- trainControl(method = "cv", number = 10)
rf_model <- randomForest(inadimplente ~ ., data = trainData)
rf_model
plot(rf_model, ylim = c(0,0.36))
plot(rf_model, ylim = c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
varImpPlot(rf_model)
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()
predictionrf <- predict(rf_model, testData)
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
cmrf
saveRDS(rf_model, file = "rf_model.rds")
modelo <- readRDS("rf_model.rds")
y <- testData$inadimplente
predictions <- predictionrf
precision <- posPredValue(predictions, y)
precision
y <- testData$inadimplente
predictions <- predictionrf
precision <- posPredValue(predictions, y)
precision
recall <- sensitivity(predictions, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
